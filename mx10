ex 1

class Elevator:
    def __init__(self, bottom_floor, top_floor):
        self.bottom_floor = bottom_floor
        self.top_floor = top_floor
        self.current_floor = bottom_floor

    def go_to_floor(self, target_floor):
        while self.current_floor != target_floor:
            if self.current_floor < target_floor:
                self.floor_up()
            else:
                self.floor_down()

    def floor_up(self):
        self.current_floor += 1
        print(f"Elevator is now on floor {self.current_floor}")

    def floor_down(self):
        self.current_floor -= 1
        print(f"Elevator is now on floor {self.current_floor}")
ex 2

# Main program
elevator = Elevator(1, 10)

elevator.go_to_floor(7)
elevator.go_to_floor(1)

class Elevator:
    def __init__(self, bottom_floor, top_floor):
        self.bottom_floor = bottom_floor
        self.top_floor = top_floor
        self.current_floor = bottom_floor

    def go_to_floor(self, target_floor):
        while self.current_floor != target_floor:
            if self.current_floor < target_floor:
                self.floor_up()
            else:
                self.floor_down()

    def floor_up(self):
        self.current_floor += 1
        print(f"Elevator is now on floor {self.current_floor}")

    def floor_down(self):
        self.current_floor -= 1
        print(f"Elevator is now on floor {self.current_floor}")


class Building:
    def __init__(self, bottom_floor, top_floor, num_elevators):
        self.bottom_floor = bottom_floor
        self.top_floor = top_floor
        self.elevators = [Elevator(bottom_floor, top_floor) for _ in range(num_elevators)]

    def run_elevator(self, elevator_num, target_floor):
        if 0 <= elevator_num < len(self.elevators):
            self.elevators[elevator_num].go_to_floor(target_floor)
        else:
            print("Invalid elevator number")


# Main program
building = Building(1, 10, 3)

building.run_elevator(0, 7)
building.run_elevator(1, 2)
building.run_elevator(2, 9)

ex 3

class Elevator:
    def __init__(self, bottom_floor, top_floor):
        self.bottom_floor = bottom_floor
        self.top_floor = top_floor
        self.current_floor = bottom_floor

    def go_to_floor(self, target_floor):
        while self.current_floor != target_floor:
            if self.current_floor < target_floor:
                self.floor_up()
            else:
                self.floor_down()

    def floor_up(self):
        self.current_floor += 1
        print(f"Elevator is now on floor {self.current_floor}")

    def floor_down(self):
        self.current_floor -= 1
        print(f"Elevator is now on floor {self.current_floor}")


class Building:
    def __init__(self, bottom_floor, top_floor, num_elevators):
        self.bottom_floor = bottom_floor
        self.top_floor = top_floor
        self.elevators = [Elevator(bottom_floor, top_floor) for _ in range(num_elevators)]

    def run_elevator(self, elevator_num, target_floor):
        if 0 <= elevator_num < len(self.elevators):
            self.elevators[elevator_num].go_to_floor(target_floor)
        else:
            print("Invalid elevator number")

    def fire_alarm(self):
        for elevator in self.elevators:
            while elevator.current_floor > elevator.bottom_floor:
                elevator.floor_down()


# Main program
building = Building(1, 10, 3)

building.run_elevator(0, 7)
building.run_elevator(1, 2)
building.run_elevator(2, 9)

print("Fire alarm!")
building.fire_alarm()

ex 4

import random

class Car:
    # ... (same as before)

class Race:
    def __init__(self, name, distance, cars):
        self.name = name
        self.distance = distance
        self.cars = cars

    def hour_passes(self):
        for car in self.cars:
            speed_change = random.randint(-10, 15)
            car.accelerate(speed_change)
            car.drive(1)

    def print_status(self):
        print(f"Race: {self.name}")
        print("Registration Number\tMax Speed\tCurrent Speed\tTravelled Distance")
        for car in self.cars:
            print(f"{car.registration_number}\t\t{car.max_speed}\t\t{car.current_speed}\t\t{car.travelled_distance}")

    def race_finished(self):
        for car in self.cars:
            if car.travelled_distance >= self.distance:
                return True
        return False

def main():
    cars = []
    for i in range(1, 11):
        max_speed = random.randint(100, 200)
        car = Car(f"ABC-{i}", max_speed)
        cars.append(car)

    race = Race("Grand Demolition Derby", 8000, cars)

    hours = 0
    while not race.race_finished():
        race.hour_passes()
        hours += 1
        if hours % 10 == 0:
            race.print_status()

    race.print_status()

if __name__ == "__main__":
    main()
